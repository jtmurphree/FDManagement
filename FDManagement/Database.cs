// Licence file C:\Users\Jason\OneDrive\Documents\ReversePOCO.txt not found.
// Please obtain your licence file at www.ReversePOCO.co.uk, and place it in your documents folder shown above.
// Defaulting to Trial version.
// <auto-generated>
// ReSharper disable All

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Design;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlTypes;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

namespace FDManagement
{
    #region Database context interface

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public interface IApplicaionDbContext : IDisposable
    {
        DbSet<Global_RegisteredUserRole> Global_RegisteredUserRoles { get; set; } // RegisteredUserRoles
        DbSet<Global_User> Global_Users { get; set; } // Users
        DbSet<Global_UserRole> Global_UserRoles { get; set; } // UserRoles
        DbSet<Inventory_Category> Inventory_Categories { get; set; } // Categories
        DbSet<Inventory_Item> Inventory_Items { get; set; } // Items
        DbSet<Vehicle_ApparatusType> Vehicle_ApparatusTypes { get; set; } // ApparatusType
        DbSet<Vehicle_DriveType> Vehicle_DriveTypes { get; set; } // DriveType
        DbSet<Vehicle_FuelType> Vehicle_FuelTypes { get; set; } // FuelType

        int SaveChanges();
        int SaveChanges(bool acceptAllChangesOnSuccess);
        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default(CancellationToken));
        Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken));
        DatabaseFacade Database { get; }
        DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        EntityEntry Add(object entity);
        EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class;
        Task AddRangeAsync(params object[] entities);
        Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default);
        ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class;
        ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default);
        void AddRange(IEnumerable<object> entities);
        void AddRange(params object[] entities);

        EntityEntry Attach(object entity);
        EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class;
        void AttachRange(IEnumerable<object> entities);
        void AttachRange(params object[] entities);

        EntityEntry Entry(object entity);
        EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;

        TEntity Find<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class;
        ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class;
        ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken);
        ValueTask<object> FindAsync(Type entityType, params object[] keyValues);
        object Find(Type entityType, params object[] keyValues);

        EntityEntry Remove(object entity);
        EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class;
        void RemoveRange(IEnumerable<object> entities);
        void RemoveRange(params object[] entities);

        EntityEntry Update(object entity);
        EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class;
        void UpdateRange(IEnumerable<object> entities);
        void UpdateRange(params object[] entities);

        IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression);
    }

    #endregion

    #region Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class ApplicaionDbContext : DbContext, IApplicaionDbContext
    {
        public ApplicaionDbContext()
        {
        }

        public ApplicaionDbContext(DbContextOptions<ApplicaionDbContext> options)
            : base(options)
        {
        }

        public DbSet<Global_RegisteredUserRole> Global_RegisteredUserRoles { get; set; } // RegisteredUserRoles
        public DbSet<Global_User> Global_Users { get; set; } // Users
        public DbSet<Global_UserRole> Global_UserRoles { get; set; } // UserRoles
        public DbSet<Inventory_Category> Inventory_Categories { get; set; } // Categories
        public DbSet<Inventory_Item> Inventory_Items { get; set; } // Items
        public DbSet<Vehicle_ApparatusType> Vehicle_ApparatusTypes { get; set; } // ApparatusType
        public DbSet<Vehicle_DriveType> Vehicle_DriveTypes { get; set; } // DriveType
        public DbSet<Vehicle_FuelType> Vehicle_FuelTypes { get; set; } // FuelType

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(@"Server=DESKTOP-5T2409J;Database=FireDept;TrustServerCertificate=True;Trusted_Connection=True");
            }
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration(new Global_RegisteredUserRoleConfiguration());
            modelBuilder.ApplyConfiguration(new Global_UserConfiguration());
            modelBuilder.ApplyConfiguration(new Global_UserRoleConfiguration());
            modelBuilder.ApplyConfiguration(new Inventory_CategoryConfiguration());
            modelBuilder.ApplyConfiguration(new Inventory_ItemConfiguration());
            modelBuilder.ApplyConfiguration(new Vehicle_ApparatusTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Vehicle_DriveTypeConfiguration());
            modelBuilder.ApplyConfiguration(new Vehicle_FuelTypeConfiguration());
        }

    }

    #endregion

    #region Database context factory

    public class ApplicaionDbContextFactory : IDesignTimeDbContextFactory<ApplicaionDbContext>
    {
        public ApplicaionDbContext CreateDbContext(string[] args)
        {
            return new ApplicaionDbContext();
        }
    }

    #endregion

    #region Fake Database context

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    public class FakeApplicaionDbContext : IApplicaionDbContext
    {
        public DbSet<Global_RegisteredUserRole> Global_RegisteredUserRoles { get; set; } // RegisteredUserRoles
        public DbSet<Global_User> Global_Users { get; set; } // Users
        public DbSet<Global_UserRole> Global_UserRoles { get; set; } // UserRoles
        public DbSet<Inventory_Category> Inventory_Categories { get; set; } // Categories
        public DbSet<Inventory_Item> Inventory_Items { get; set; } // Items
        public DbSet<Vehicle_ApparatusType> Vehicle_ApparatusTypes { get; set; } // ApparatusType
        public DbSet<Vehicle_DriveType> Vehicle_DriveTypes { get; set; } // DriveType
        public DbSet<Vehicle_FuelType> Vehicle_FuelTypes { get; set; } // FuelType

        public FakeApplicaionDbContext()
        {
            _database = new FakeDatabaseFacade(new ApplicaionDbContext());

            Global_RegisteredUserRoles = new FakeDbSet<Global_RegisteredUserRole>("Id");
            Global_Users = new FakeDbSet<Global_User>("Id");
            Global_UserRoles = new FakeDbSet<Global_UserRole>("Id");
            Inventory_Categories = new FakeDbSet<Inventory_Category>("Id");
            Inventory_Items = new FakeDbSet<Inventory_Item>("Id");
            Vehicle_ApparatusTypes = new FakeDbSet<Vehicle_ApparatusType>("Id");
            Vehicle_DriveTypes = new FakeDbSet<Vehicle_DriveType>("Id");
            Vehicle_FuelTypes = new FakeDbSet<Vehicle_FuelType>("Id");

        }

        public int SaveChangesCount { get; private set; }
        public virtual int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public virtual int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            return SaveChanges();
        }

        public virtual Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }
        public virtual Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return Task<int>.Factory.StartNew(x => 1, acceptAllChangesOnSuccess, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private DatabaseFacade _database;
        public DatabaseFacade Database { get { return _database; } }

        public DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new NotImplementedException();
        }

        public override string ToString()
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Add(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Add<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual Task AddRangeAsync(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual async Task AddRangeAsync(IEnumerable<object> entities, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry<TEntity>> AddAsync<TEntity>(TEntity entity, CancellationToken cancellationToken = default) where TEntity : class
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual async ValueTask<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken = default)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        public virtual void AddRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AddRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Attach(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Attach<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void AttachRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Entry(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual TEntity Find<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(object[] keyValues, CancellationToken cancellationToken) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<TEntity> FindAsync<TEntity>(params object[] keyValues) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, object[] keyValues, CancellationToken cancellationToken)
        {
            throw new NotImplementedException();
        }

        public virtual ValueTask<object> FindAsync(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual object Find(Type entityType, params object[] keyValues)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Remove(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Remove<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void RemoveRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry Update(object entity)
        {
            throw new NotImplementedException();
        }

        public virtual EntityEntry<TEntity> Update<TEntity>(TEntity entity) where TEntity : class
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(IEnumerable<object> entities)
        {
            throw new NotImplementedException();
        }

        public virtual void UpdateRange(params object[] entities)
        {
            throw new NotImplementedException();
        }

        public virtual IQueryable<TResult> FromExpression<TResult> (Expression<Func<IQueryable<TResult>>> expression)
        {
            throw new NotImplementedException();
        }

    }

    #endregion

    #region Fake DbSet

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    public class FakeDbSet<TEntity> :
        DbSet<TEntity>,
        IQueryable<TEntity>,
        IAsyncEnumerable<TEntity>,
        IListSource,
        IResettableService
        where TEntity : class
    {
        private readonly PropertyInfo[] _primaryKeys;
        private ObservableCollection<TEntity> _data;
        private IQueryable _query;
        public override IEntityType EntityType { get; }

        public FakeDbSet()
        {
            _primaryKeys = null;
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data        = new ObservableCollection<TEntity>();
            _query       = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override ValueTask<TEntity> FindAsync(object[] keyValues, CancellationToken cancellationToken)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken));
        }

        public override ValueTask<TEntity> FindAsync(params object[] keyValues)
        {
            return new ValueTask<TEntity>(Task<TEntity>.Factory.StartNew(() => Find(keyValues)));
        }

        public override EntityEntry<TEntity> Add(TEntity entity)
        {
            _data.Add(entity);
            return null;
        }

        public override ValueTask<EntityEntry<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken = default)
        {
            return new ValueTask<EntityEntry<TEntity>>(Task<EntityEntry<TEntity>>.Factory.StartNew(() => Add(entity), cancellationToken));
        }

        public override void AddRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override void AddRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities)
                _data.Add(entity);
        }

        public override Task AddRangeAsync(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities));
        }

        public override Task AddRangeAsync(IEnumerable<TEntity> entities, CancellationToken cancellationToken = default)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            return Task.Factory.StartNew(() => AddRange(entities), cancellationToken);
        }

        public override EntityEntry<TEntity> Attach(TEntity entity)
        {
            if (entity == null) throw new ArgumentNullException("entity");
            return Add(entity);
        }

        public override void AttachRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override void AttachRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            AddRange(entities);
        }

        public override EntityEntry<TEntity> Remove(TEntity entity)
        {
            _data.Remove(entity);
            return null;
        }

        public override void RemoveRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            foreach (var entity in entities.ToList())
                _data.Remove(entity);
        }

        public override void RemoveRange(IEnumerable<TEntity> entities)
        {
            RemoveRange(entities.ToArray());
        }

        public override EntityEntry<TEntity> Update(TEntity entity)
        {
            _data.Remove(entity);
            _data.Add(entity);
            return null;
        }

        public override void UpdateRange(params TEntity[] entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            RemoveRange(entities);
            AddRange(entities);
        }

        public override void UpdateRange(IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new ArgumentNullException("entities");
            var array = entities.ToArray();        RemoveRange(array);
            AddRange(array);
        }

        bool IListSource.ContainsListCollection => true;

        public IList GetList()
        {
            return _data;
        }

        IList IListSource.GetList()
        {
            return _data;
        }

        Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_data); }
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        IEnumerator<TEntity> IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        public override IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }

        public void ResetState()
        {
            _data  = new ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public Task ResetStateAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.Factory.StartNew(() => ResetState());
        }
    }

    public class FakeDbAsyncQueryProvider<TEntity> : FakeQueryProvider<TEntity>, IAsyncEnumerable<TEntity>, IAsyncQueryProvider
    {
        public FakeDbAsyncQueryProvider(Expression expression) : base(expression)
        {
        }

        public FakeDbAsyncQueryProvider(IEnumerable<TEntity> enumerable) : base(enumerable)
        {
        }

        public TResult ExecuteAsync<TResult>(Expression expression, CancellationToken cancellationToken)
        {
            var expectedResultType = typeof(TResult).GetGenericArguments()[0];
            var executionResult = typeof(IQueryProvider)
                .GetMethods()
                .First(method => method.Name == nameof(IQueryProvider.Execute) && method.IsGenericMethod)
                .MakeGenericMethod(expectedResultType)
                .Invoke(this, new object[] { expression });

            return (TResult) typeof(Task).GetMethod(nameof(Task.FromResult))
                ?.MakeGenericMethod(expectedResultType)
                .Invoke(null, new[] { executionResult });
        }

        public IAsyncEnumerator<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken = default)
        {
            return new FakeDbAsyncEnumerator<TEntity>(this.AsEnumerable().GetEnumerator());
        }
    }

    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, IAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(IEnumerable<T> enumerable)
            : base(enumerable)
        {
        }

        public FakeDbAsyncEnumerable(Expression expression)
            : base(expression)
        {
        }

        public IAsyncEnumerator<T> GetAsyncEnumerator(CancellationToken cancellationToken = new CancellationToken())
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        IAsyncEnumerator<T> IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken cancellationToken)
        {
            return GetAsyncEnumerator(cancellationToken);
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.AsEnumerable().GetEnumerator();
        }
    }

    public class FakeDbAsyncEnumerator<T> : IAsyncEnumerator<T>
    {
        private readonly IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        public ValueTask<bool> MoveNextAsync()
        {
            return new ValueTask<bool>(_inner.MoveNext());
        }

        public ValueTask DisposeAsync()
        {
            _inner.Dispose();
            return new ValueTask(Task.CompletedTask);
        }
    }

    public abstract class FakeQueryProvider<T> : IOrderedQueryable<T>, IQueryProvider
    {
        private IEnumerable<T> _enumerable;

        protected FakeQueryProvider(Expression expression)
        {
            Expression = expression;
        }

        protected FakeQueryProvider(IEnumerable<T> enumerable)
        {
            _enumerable = enumerable;
            Expression = enumerable.AsQueryable().Expression;
        }

        public IQueryable CreateQuery(Expression expression)
        {
            if (expression is MethodCallExpression m)
            {
                var resultType = m.Method.ReturnType; // it should be IQueryable<T>
                var tElement = resultType.GetGenericArguments().First();
                return (IQueryable) CreateInstance(tElement, expression);
            }

            return CreateQuery<T>(expression);
        }

        public IQueryable<TEntity> CreateQuery<TEntity>(Expression expression)
        {
            return (IQueryable<TEntity>) CreateInstance(typeof(TEntity), expression);
        }

        private object CreateInstance(Type tElement, Expression expression)
        {
            var queryType = GetType().GetGenericTypeDefinition().MakeGenericType(tElement);
            return Activator.CreateInstance(queryType, expression);
        }

        public object Execute(Expression expression)
        {
            return CompileExpressionItem<object>(expression);
        }

        public TResult Execute<TResult>(Expression expression)
        {
            return CompileExpressionItem<TResult>(expression);
        }

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            if (_enumerable == null) _enumerable = CompileExpressionItem<IEnumerable<T>>(Expression);
            return _enumerable.GetEnumerator();
        }

        public Type ElementType => typeof(T);

        public Expression Expression { get; }

        public IQueryProvider Provider => this;

        private static TResult CompileExpressionItem<TResult>(Expression expression)
        {
            var visitor = new FakeExpressionVisitor();
            var body = visitor.Visit(expression);
            var f = Expression.Lambda<Func<TResult>>(body ?? throw new InvalidOperationException(string.Format("{0} is null", nameof(body))), (IEnumerable<ParameterExpression>) null);
            return f.Compile()();
        }
    }

    public class FakeExpressionVisitor : ExpressionVisitor
    {
    }

    public class FakeDatabaseFacade : DatabaseFacade
    {
        public FakeDatabaseFacade(DbContext context) : base(context)
        {
        }

        public override bool EnsureCreated()
        {
            return true;
        }

        public override Task<bool> EnsureCreatedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureCreated());
        }

        public override bool EnsureDeleted()
        {
            return true;
        }

        public override Task<bool> EnsureDeletedAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(EnsureDeleted());
        }

        public override bool CanConnect()
        {
            return true;
        }

        public override Task<bool> CanConnectAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(CanConnect());
        }

        public override IDbContextTransaction BeginTransaction()
        {
            return new FakeDbContextTransaction();
        }

        public override Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.FromResult(BeginTransaction());
        }

        public override void CommitTransaction()
        {
        }

        public override Task CommitTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override void RollbackTransaction()
        {
        }

        public override Task RollbackTransactionAsync(CancellationToken cancellationToken = new CancellationToken())
        {
            return Task.CompletedTask;
        }

        public override IExecutionStrategy CreateExecutionStrategy()
        {
            return null;
        }

        public override string ToString()
        {
            return string.Empty;
        }
    }

    public class FakeDbContextTransaction : IDbContextTransaction
    {
        public Guid TransactionId => Guid.NewGuid();
        public void Commit() { }
        public void Rollback() { }
        public Task CommitAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public Task RollbackAsync(CancellationToken cancellationToken = new CancellationToken()) => Task.CompletedTask;
        public void Dispose() { }
        public ValueTask DisposeAsync() => default;
    }

    #endregion

    #region POCO classes

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // RegisteredUserRoles
    public class Global_RegisteredUserRole
    {
        public int Id { get; set; } // ID (Primary key)
        public int UserId { get; set; } // UserID
        public int RoleId { get; set; } // RoleID

        // Foreign keys

        /// <summary>
        /// Parent Global_User pointed by [RegisteredUserRoles].([UserId]) (FK__Registere__UserI__7C4F7684)
        /// </summary>
        public Global_User Global_User { get; set; } // FK__Registere__UserI__7C4F7684

        /// <summary>
        /// Parent Global_UserRole pointed by [RegisteredUserRoles].([RoleId]) (FK__Registere__RoleI__7D439ABD)
        /// </summary>
        public Global_UserRole Global_UserRole { get; set; } // FK__Registere__RoleI__7D439ABD
    }

    // Users
    public class Global_User
    {
        public int Id { get; set; } // ID (Primary key)
        public string FirstName { get; set; } // FirstName (length: 255)
        public string LastName { get; set; } // LastName (length: 255)
        public string UserName { get; set; } // UserName (length: 255)
        public string DisplayName { get; set; } // DisplayName (length: 255)
        public string EmployeeId { get; set; } // EmployeeID (length: 50)
        public string PhoneNumber { get; set; } // PhoneNumber (length: 20)
        public string Email { get; set; } // Email (length: 255)
        public string PasswordHash { get; set; } // PasswordHash
        public int? AccessFailedCount { get; set; } // AccessFailedCount
        public DateTime DatedAdded { get; set; } // DatedAdded
        public DateTime? DateUpdated { get; set; } // DateUpdated
        public bool TempPw { get; set; } // TempPW

        // Reverse navigation

        /// <summary>
        /// Child Global_RegisteredUserRoles where [RegisteredUserRoles].[UserID] point to this entity (FK__Registere__UserI__7C4F7684)
        /// </summary>
        public ICollection<Global_RegisteredUserRole> Global_RegisteredUserRoles { get; set; } // RegisteredUserRoles.FK__Registere__UserI__7C4F7684

        public Global_User()
        {
            Global_RegisteredUserRoles = new List<Global_RegisteredUserRole>();
        }
    }

    // UserRoles
    public class Global_UserRole
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 255)
        public string Description { get; set; } // Description

        // Reverse navigation

        /// <summary>
        /// Child Global_RegisteredUserRoles where [RegisteredUserRoles].[RoleID] point to this entity (FK__Registere__RoleI__7D439ABD)
        /// </summary>
        public ICollection<Global_RegisteredUserRole> Global_RegisteredUserRoles { get; set; } // RegisteredUserRoles.FK__Registere__RoleI__7D439ABD

        public Global_UserRole()
        {
            Global_RegisteredUserRoles = new List<Global_RegisteredUserRole>();
        }
    }

    // Categories
    public class Inventory_Category
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 255)
        public string Description { get; set; } // Description

        // Reverse navigation

        /// <summary>
        /// Child Inventory_Items where [Items].[Category] point to this entity (FK_Category)
        /// </summary>
        public ICollection<Inventory_Item> Inventory_Items { get; set; } // Items.FK_Category

        public Inventory_Category()
        {
            Inventory_Items = new List<Inventory_Item>();
        }
    }

    // Items
    public class Inventory_Item
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 255)
        public string Description { get; set; } // Description
        public string SerialNumber { get; set; } // SerialNumber (length: 255)
        public decimal? Value { get; set; } // Value
        public int? Category { get; set; } // Category

        // Foreign keys

        /// <summary>
        /// Parent Inventory_Category pointed by [Items].([Category]) (FK_Category)
        /// </summary>
        public Inventory_Category Inventory_Category { get; set; } // FK_Category
    }

    // ApparatusType
    public class Vehicle_ApparatusType
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 256)
        public string Description { get; set; } // Description (length: 256)
    }

    // DriveType
    public class Vehicle_DriveType
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 256)
        public string Description { get; set; } // Description
    }

    // FuelType
    public class Vehicle_FuelType
    {
        public int Id { get; set; } // ID (Primary key)
        public string Name { get; set; } // Name (length: 256)
        public string Description { get; set; } // Description
    }


    #endregion

    #region POCO Configuration

    // ****************************************************************************************************
    // This is not a commercial licence, therefore only a few tables/views/stored procedures are generated.
    // ****************************************************************************************************

    // RegisteredUserRoles
    public class Global_RegisteredUserRoleConfiguration : IEntityTypeConfiguration<Global_RegisteredUserRole>
    {
        public void Configure(EntityTypeBuilder<Global_RegisteredUserRole> builder)
        {
            builder.ToTable("RegisteredUserRoles", "Global");
            builder.HasKey(x => x.Id).HasName("PK__Register__3214EC2722383D09").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.UserId).HasColumnName(@"UserID").HasColumnType("int").IsRequired();
            builder.Property(x => x.RoleId).HasColumnName(@"RoleID").HasColumnType("int").IsRequired();

            // Foreign keys
            builder.HasOne(a => a.Global_User).WithMany(b => b.Global_RegisteredUserRoles).HasForeignKey(c => c.UserId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Registere__UserI__7C4F7684");
            builder.HasOne(a => a.Global_UserRole).WithMany(b => b.Global_RegisteredUserRoles).HasForeignKey(c => c.RoleId).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Registere__RoleI__7D439ABD");
        }
    }

    // Users
    public class Global_UserConfiguration : IEntityTypeConfiguration<Global_User>
    {
        public void Configure(EntityTypeBuilder<Global_User> builder)
        {
            builder.ToTable("Users", "Global");
            builder.HasKey(x => x.Id).HasName("PK__Users__3214EC275B9737E3").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.UserName).HasColumnName(@"UserName").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.DisplayName).HasColumnName(@"DisplayName").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.EmployeeId).HasColumnName(@"EmployeeID").HasColumnType("varchar(50)").IsRequired(false).IsUnicode(false).HasMaxLength(50);
            builder.Property(x => x.PhoneNumber).HasColumnName(@"PhoneNumber").HasColumnType("varchar(20)").IsRequired(false).IsUnicode(false).HasMaxLength(20);
            builder.Property(x => x.Email).HasColumnName(@"Email").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.PasswordHash).HasColumnName(@"PasswordHash").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.AccessFailedCount).HasColumnName(@"AccessFailedCount").HasColumnType("int").IsRequired(false);
            builder.Property(x => x.DatedAdded).HasColumnName(@"DatedAdded").HasColumnType("datetime").IsRequired();
            builder.Property(x => x.DateUpdated).HasColumnName(@"DateUpdated").HasColumnType("datetime").IsRequired(false);
            builder.Property(x => x.TempPw).HasColumnName(@"TempPW").HasColumnType("bit").IsRequired();
        }
    }

    // UserRoles
    public class Global_UserRoleConfiguration : IEntityTypeConfiguration<Global_UserRole>
    {
        public void Configure(EntityTypeBuilder<Global_UserRole> builder)
        {
            builder.ToTable("UserRoles", "Global");
            builder.HasKey(x => x.Id).HasName("PK__UserRole__3214EC27A3A5995D").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
        }
    }

    // Categories
    public class Inventory_CategoryConfiguration : IEntityTypeConfiguration<Inventory_Category>
    {
        public void Configure(EntityTypeBuilder<Inventory_Category> builder)
        {
            builder.ToTable("Categories", "Inventory");
            builder.HasKey(x => x.Id).HasName("PK__Categori__3214EC2726C01071").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
        }
    }

    // Items
    public class Inventory_ItemConfiguration : IEntityTypeConfiguration<Inventory_Item>
    {
        public void Configure(EntityTypeBuilder<Inventory_Item> builder)
        {
            builder.ToTable("Items", "Inventory");
            builder.HasKey(x => x.Id).HasName("PK__Items__3214EC27F7C87423").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(255)").IsRequired().IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
            builder.Property(x => x.SerialNumber).HasColumnName(@"SerialNumber").HasColumnType("varchar(255)").IsRequired(false).IsUnicode(false).HasMaxLength(255);
            builder.Property(x => x.Value).HasColumnName(@"Value").HasColumnType("decimal(10,2)").HasPrecision(10,2).IsRequired(false);
            builder.Property(x => x.Category).HasColumnName(@"Category").HasColumnType("int").IsRequired(false);

            // Foreign keys
            builder.HasOne(a => a.Inventory_Category).WithMany(b => b.Inventory_Items).HasForeignKey(c => c.Category).OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK_Category");
        }
    }

    // ApparatusType
    public class Vehicle_ApparatusTypeConfiguration : IEntityTypeConfiguration<Vehicle_ApparatusType>
    {
        public void Configure(EntityTypeBuilder<Vehicle_ApparatusType> builder)
        {
            builder.ToTable("ApparatusType", "Vehicle");
            builder.HasKey(x => x.Id).HasName("PK__Apparatu__3214EC274B82B08A").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(256)").IsRequired(false).IsUnicode(false).HasMaxLength(256);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(256)").IsRequired(false).IsUnicode(false).HasMaxLength(256);
        }
    }

    // DriveType
    public class Vehicle_DriveTypeConfiguration : IEntityTypeConfiguration<Vehicle_DriveType>
    {
        public void Configure(EntityTypeBuilder<Vehicle_DriveType> builder)
        {
            builder.ToTable("DriveType", "Vehicle");
            builder.HasKey(x => x.Id).HasName("PK__DriveTyp__3214EC27BDE02625").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(256)").IsRequired(false).IsUnicode(false).HasMaxLength(256);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
        }
    }

    // FuelType
    public class Vehicle_FuelTypeConfiguration : IEntityTypeConfiguration<Vehicle_FuelType>
    {
        public void Configure(EntityTypeBuilder<Vehicle_FuelType> builder)
        {
            builder.ToTable("FuelType", "Vehicle");
            builder.HasKey(x => x.Id).HasName("PK__FuelType__3214EC274DA9D2EA").IsClustered();

            builder.Property(x => x.Id).HasColumnName(@"ID").HasColumnType("int").IsRequired().ValueGeneratedOnAdd().UseIdentityColumn();
            builder.Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar(256)").IsRequired(false).IsUnicode(false).HasMaxLength(256);
            builder.Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar(max)").IsRequired(false).IsUnicode(false);
        }
    }


    #endregion

}
// </auto-generated>
